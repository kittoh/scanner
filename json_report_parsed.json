[{"pluginid": "10108", "alertRef": "10108", "alert": "Reverse Tabnabbing", "name": "Reverse Tabnabbing", "riskcode": "2", "confidence": "2", "riskdesc": "Medium (Medium)", "desc": "<p>At least one link on this page is vulnerable to Reverse tabnabbing as it uses a target attribute without using both of the \"noopener\" and \"noreferrer\" keywords in the \"rel\" attribute, which allows the target page to take control of this page.</p>", "instances": [{"uri": "http://testhtml5.vulnweb.com/", "method": "GET", "evidence": "<a target=\"_blank\" href=\"http://www.acunetix.com/\">Website</a>"}, {"uri": "http://testhtml5.vulnweb.com", "method": "GET", "evidence": "<a target=\"_blank\" href=\"http://www.acunetix.com/\">Website</a>"}], "count": "2", "solution": "<p>Do not use a target attribute, or if you have to then also add the attribute: rel=\"noopener noreferrer\".</p>", "reference": "<p>https://owasp.org/www-community/attacks/Reverse_Tabnabbing</p><p>https://dev.to/ben/the-targetblank-vulnerability-by-example</p><p>https://mathiasbynens.github.io/rel-noopener/</p><p>https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c</p>", "sourceid": "3"}, {"pluginid": "10098", "alertRef": "10098", "alert": "Cross-Domain Misconfiguration", "name": "Cross-Domain Misconfiguration", "riskcode": "2", "confidence": "2", "riskdesc": "Medium (Medium)", "desc": "<p>Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server</p>", "instances": [{"uri": "http://testhtml5.vulnweb.com", "method": "GET", "evidence": "Access-Control-Allow-Origin: *"}, {"uri": "http://testhtml5.vulnweb.com/", "method": "GET", "evidence": "Access-Control-Allow-Origin: *"}], "count": "2", "solution": "<p>Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).</p><p>Configure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.</p>", "otherinfo": "<p>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</p>", "reference": "<p>http://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html</p>", "cweid": "264", "wascid": "14", "sourceid": "3"}, {"pluginid": "10020", "alertRef": "10020", "alert": "X-Frame-Options Header Not Set", "name": "X-Frame-Options Header Not Set", "riskcode": "2", "confidence": "2", "riskdesc": "Medium (Medium)", "desc": "<p>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</p>", "instances": [{"uri": "http://testhtml5.vulnweb.com/", "method": "GET", "param": "X-Frame-Options"}, {"uri": "http://testhtml5.vulnweb.com", "method": "GET", "param": "X-Frame-Options"}], "count": "2", "solution": "<p>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive. </p>", "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options</p>", "cweid": "16", "wascid": "15", "sourceid": "3"}, {"pluginid": "10003", "alertRef": "10003", "alert": "Vulnerable JS Library", "name": "Vulnerable JS Library", "riskcode": "2", "confidence": "2", "riskdesc": "Medium (Medium)", "desc": "<p>The identified library sessvars, version 1.00 is vulnerable.</p>", "instances": [{"uri": "http://testhtml5.vulnweb.com/static/app/libs/sessvars.js", "method": "GET", "evidence": "sessvars ver 1.00"}], "count": "1", "solution": "<p>Please upgrade to the latest version of sessvars.</p>", "reference": "<p>http://www.thomasfrank.se/sessionvars.html</p><p></p>", "cweid": "829", "sourceid": "3"}]